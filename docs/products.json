{
  "openapi": "3.0.1",
  "info": {
    "title": "oPus Api for Products",
    "description": "oPus Api for creating, Updating, Editing and Deleting Products",
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    },
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://infosk.herokuapp.com/api/v1"
    },
    {
      "url": "http://localhost:3338/api/v1"
    }
  ],
  "tags": [
    {
      "name": "Products",
      "description": "API for products in the system"
    }
  ],
  "paths": {
    "/products": {
      "get": {
        "tags": [
          "Products"
        ],
        "summary": "Get all products in system",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Products"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Products"
        ],
        "description": "Create new product in system",
        "requestBody": {
          "description": "Product that we want to create",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Product"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "New product is created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Product"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "product"
      }
    },
    "/products/{productId}": {
      "get": {
        "tags": [
          "Products"
        ],
        "summary": "Get product with given ID",
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "description": "ID of product that we want to find",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Product is found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Product"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Products"
        ],
        "summary": "Update product with give ID",
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "description": "ID of product that we want to find",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Product with new values of properties",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Product"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Product is updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Product"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "product"
      },
      "patch": {
        "tags": [
          "Products"
        ],
        "summary": "Update fields of product with give ID",
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "description": "ID of product that we want to find",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Product with new values of properties",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Product"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Product is updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Product"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "product"
      },
      "delete": {
        "tags": [
          "Products"
        ],
        "summary": "Delete product with given ID",
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "description": "ID of product that we want to find",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Product is deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Product"
                }
              }
            }
          }
        }
      }
    },
    "/products/{productId}/comments": {
      "get": {
        "tags": [
          "Product"
        ],
        "summary": "Get all coments of a give product with a given ID",
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "description": "ID of product that we want to find",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Product comments found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Comments"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Product"
        ],
        "summary": "Comments a product fo a given ID",
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "description": "ID of product that we want to find",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Product with new comment",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Comment"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Product is updated",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "code"
                      ],
                      "default": 200
                    },
                    "message": {
                      "type": "string",
                      "enum": [
                        "message"
                      ],
                      "default": "Comment sent !"
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "product"
      }
    },
    "/products/{productId}/comments/{commentId}": {
      "get": {
        "tags": [
          "ProductComments"
        ],
        "summary": "Get comment by ID of a give productID with a given",
        "parameters": [
          {
            "name": "productId",
            "in": "query",
            "description": "ID of product that we want to find",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "commentId",
            "in": "path",
            "description": "ID of comment that we want to find",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Product comments found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Comment"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "ProductComments"
        ],
        "summary": "Delete specific comment in a specific product",
        "parameters": [
          {
            "name": "productId",
            "in": "query",
            "description": "ID of product you want to delete comment from",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "commentId",
            "in": "query",
            "description": "ID of comment you want to delete from this product",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Comment deleted succesfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Responses"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Product": {
        "required": [
          "name",
          "price",
          "image",
          "phone",
          "color"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "price": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          },
          "image": {
            "type": "string"
          },
          "color": {
            "type": "string"
          },
          "comments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Comments"
            }
          }
        }
      },
      "Products": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Product"
        }
      },
      "Responses": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              200,
              404
            ],
            "default": 200
          },
          "message": {
            "type": "string",
            "enum": [
              "Response"
            ],
            "default": "Comment Deleted Succesfully !"
          }
        }
      },
      "Comment": {
        "type": "object",
        "properties": {
          "comment_on": {
            "type": "string"
          },
          "_id": {
            "type": "string"
          },
          "sendername": {
            "type": "string"
          },
          "receivername": {
            "type": "string"
          }
        }
      },
      "Comments": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Comment"
        }
      }
    }
  }
}